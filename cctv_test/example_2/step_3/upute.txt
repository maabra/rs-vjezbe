Naravno, evo kako možete kombinirati sve tražene zadatke u jednu smislenu poruku:

### Priprema `cctv.py` kao mikroservis

1. **Definirajte aiohttp poslužitelj koji sluša na portu 8090 i ima endpoint `/cctv` za stvaranje nove instance `CCTV_frame`:**

```python
# cctv/cctv.py

import uuid
from aiohttp import web

class CCTV_frame:
    def __init__(self, frame_id, location_x, location_y, frame_rate, camera_status, zoom_level, ip_address):
        self.frame_id = frame_id
        self.location_x = location_x
        self.location_y = location_y
        self.frame_rate = frame_rate
        self.camera_status = camera_status
        self.zoom_level = zoom_level
        self.ip_address = ip_address

    def update_location(self, x, y):
        self.location_x = x
        self.location_y = y

    def info(self):
        return (f"Frame ID: {self.frame_id}, Location: ({self.location_x}, {self.location_y}), "
                f"Frame rate: {self.frame_rate}, Camera status: {self.camera_status}, "
                f"Zoom level: {self.zoom_level}x, IP address: {self.ip_address}")

async def create_cctv_frame(request):
    try:
        data = await request.json()
        cctv_frame = CCTV_frame(
            frame_id=uuid.uuid4(),
            location_x=data['location_x'],
            location_y=data['location_y'],
            frame_rate=data['frame_rate'],
            camera_status=data['camera_status'],
            zoom_level=data['zoom_level'],
            ip_address=data['ip_address']
        )
        response_data = {
            "cctv_details": {
                "frame_id": cctv_frame.frame_id,
                "location_x": cctv_frame.location_x,
                "location_y": cctv_frame.location_y,
                "frame_rate": cctv_frame.frame_rate,
                "camera_status": cctv_frame.camera_status,
                "zoom_level": f"{cctv_frame.zoom_level}x",
                "ip_address": cctv_frame.ip_address
            },
            "message": cctv_frame.info()
        }
        return web.json_response(response_data, status=201)
    except Exception as e:
        return web.json_response({'error': str(e)}, status=400)

app = web.Application()
app.add_routes([web.post('/cctv', create_cctv_frame)])

if __name__ == '__main__':
    web.run_app(app, port=8090)
```

### Ažuriranje `index.py` za pozivanje mikroservisa i testiranje

2. **Definirajte klijentsku sesiju unutar `main` korutine i napravite 50 konkurentnih zahtjeva prema `/cctv` endpointu mikroservisa `cctv.py`:**

```python
# cctv/index.py

import asyncio
import random
from cctv import CCTV_frame

async def simulate_movement(seconds, frame_rate):
    total_frames = frame_rate * seconds
    positions = []

    for _ in range(total_frames):
        x = random.uniform(-100, 100)
        y = random.uniform(-100, 100)
        positions.append((x, y))
        await asyncio.sleep(1 / frame_rate)  # Simulira čekanje na izvršavanje jednog frame-a

    return positions

async def update_camera_location(instance, x, y):
    instance.update_location(x, y)
    print(instance.info())

async def main():
    frame_rate = 30

    # Testiranje korutine simulate_movement za 5 sekundi
    print("Testing simulate_movement for 5 seconds:")
    positions = await simulate_movement(5, frame_rate)
    print(positions)

    # Konkurentno pozivanje korutine 5 puta za 1, 2, 3, 4, 5 sekundi simuliranja
    durations = [1, 2, 3, 4, 5]
    tasks = [simulate_movement(seconds, frame_rate) for seconds in durations]
    results = await asyncio.gather(*tasks)

    # Normalizacija liste positions
    positions = [pos for sublist in results for pos in sublist]

    # Uzimanje prvih 50 pozicija
    first_50_positions = positions[:50]

    # Kreiranje instance CCTV_frame
    cctv_frame = CCTV_frame(
        frame_id=1,
        location_x=0,
        location_y=0,
        frame_rate=30,
        camera_status="Active",
        zoom_level=1,
        ip_address="192.168.1.1"
    )

    # Pozivanje korutine update_camera_location za svaku poziciju iz liste first_50_positions
    update_tasks = [update_camera_location(cctv_frame, x, y) for x, y in first_50_positions]
    await asyncio.gather(*update_tasks)

    # Ispisivanje ukupnog broja pozicija generiranih
    total_positions = len(positions)
    print(f"Ukupan broj pozicija koje su generirane: {total_positions}")

    # Klijentska sesija i slanje 50 konkurentnih zahtjeva prema endpointu /cctv
    async with aiohttp.ClientSession() as session:
        cctv_tasks = [
            session.post('http://localhost:8090/cctv', json={
                "location_x": x,
                "location_y": y,
                "frame_rate": 30,
                "camera_status": "Active",
                "zoom_level": 1,
                "ip_address": "192.168.1.1"
            }) for x, y in first_50_positions
        ]
        responses = await asyncio.gather(*cctv_tasks)
        for response in responses:
            print(await response.json())

if __name__ == '__main__':
    asyncio.run(main())
```

### Pokretanje koda

1. Pokrenite mikroservis `cctv.py`:
   ```bash
   python cctv/cctv.py
   ```

2. Pokrenite `index.py` kako biste testirali implementaciju:
   ```bash
   python cctv/index.py
   ```

Ovim pristupom pretvorili smo `cctv.py` u mikroservis koristeći `aiohttp` koji sluša na portu 8090 i ima endpoint `/cctv` za stvaranje novih instanci `CCTV_frame`. U `index.py` definirali smo klijentsku sesiju i konkurentno slali 50 zahtjeva prema mikroservisu za svaku poziciju iz liste `first_50_positions`. Na kraju smo ispisali odgovore svih zahtjeva.

Ako imate dodatnih pitanja ili trebate dodatna pojašnjenja, slobodno pitajte!