Krenimo s implementacijom novog mikroservisa u datoteci `euclidean.py` koji će izračunati euklidsku udaljenost između dviju koordinata te ga pozovimo konkurentno za svaku poziciju iz liste `first_50_positions`.

### Korak 1: Definirajte mikroservis u datoteci `euclidean.py`

```python
# cctv/euclidean.py

from aiohttp import web
import math

async def calculate_euclidean_distance(request):
    try:
        data = await request.json()
        coordinates = data['coordinates']
        x1, y1 = coordinates[0]
        x2, y2 = coordinates[1]
        distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
        response_data = {'distance': round(distance, 2)}
        return web.json_response(response_data)
    except Exception as e:
        return web.json_response({'error': str(e)}, status=400)

app = web.Application()
app.add_routes([web.post('/euclidean', calculate_euclidean_distance)])

if __name__ == '__main__':
    web.run_app(app, port=8091)
```

### Korak 2: Ažuriranje `index.py` za konkurentno pozivanje mikroservisa

```python
# cctv/index.py

import asyncio
import random
import aiohttp
from cctv import CCTV_frame

async def simulate_movement(seconds, frame_rate):
    total_frames = frame_rate * seconds
    positions = []

    for _ in range(total_frames):
        x = random.uniform(-100, 100)
        y = random.uniform(-100, 100)
        positions.append((x, y))
        await asyncio.sleep(1 / frame_rate)  # Simulira čekanje na izvršavanje jednog frame-a

    return positions

async def update_camera_location(instance, x, y):
    instance.update_location(x, y)
    print(instance.info())

async def main():
    frame_rate = 30

    # Testiranje korutine simulate_movement za 5 sekundi
    print("Testing simulate_movement for 5 seconds:")
    positions = await simulate_movement(5, frame_rate)
    print(positions)

    # Konkurentno pozivanje korutine 5 puta za 1, 2, 3, 4, 5 sekundi simuliranja
    durations = [1, 2, 3, 4, 5]
    tasks = [simulate_movement(seconds, frame_rate) for seconds in durations]
    results = await asyncio.gather(*tasks)

    # Normalizacija liste positions
    positions = [pos for sublist in results for pos in sublist]

    # Uzimanje prvih 50 pozicija
    first_50_positions = positions[:50]

    # Kreiranje instance CCTV_frame
    cctv_frame = CCTV_frame(
        frame_id=1,
        location_x=0,
        location_y=0,
        frame_rate=30,
        camera_status="Active",
        zoom_level=1,
        ip_address="192.168.1.1"
    )

    # Pozivanje korutine update_camera_location za svaku poziciju iz liste first_50_positions
    update_tasks = [update_camera_location(cctv_frame, x, y) for x, y in first_50_positions]
    await asyncio.gather(*update_tasks)

    # Ispisivanje ukupnog broja pozicija generiranih
    total_positions = len(positions)
    print(f"Ukupan broj pozicija koje su generirane: {total_positions}")

    # Klijentska sesija i slanje 50 konkurentnih zahtjeva prema endpointu /euclidean
    async with aiohttp.ClientSession() as session:
        euclidean_tasks = [
            session.post('http://localhost:8091/euclidean', json={
                "coordinates": [
                    [random.uniform(-100, 100), random.uniform(-100, 100)],
                    [x, y]
                ]
            }) for x, y in first_50_positions
        ]
        responses = await asyncio.gather(*euclidean_tasks)
        for response in responses:
            print(await response.json())

if __name__ == '__main__':
    asyncio.run(main())
```

### Pokretanje koda

1. Pokrenite mikroservis `euclidean.py`:
   ```bash
   python cctv/euclidean.py
   ```

2. Pokrenite `index.py` kako biste testirali implementaciju:
   ```bash
   python cctv/index.py
   ```

Ovim pristupom definirali smo novi mikroservis u datoteci `euclidean.py` koji računa euklidsku udaljenost između dviju koordinata i vraća rezultat u JSON formatu. U `index.py` smo ažurirali kod kako bismo konkurentno pozivali ovaj mikroservis za svaku poziciju iz liste `first_50_positions` i ispisali rezultate.
